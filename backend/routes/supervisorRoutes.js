const express = require('express');
const router = express.Router();
const db = require('../db');

// üîç GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ï‡∏≤‡∏° ID
router.get('/:id', async (req, res) => {
  const { id } = req.params;
  console.log("ü™µ GET /api/supervisor/:id =", id);
  try {
    const [rows] = await db.promise().query(
      'SELECT * FROM supervisor WHERE supervisor_id = ?',
      [id]
    );
    if (rows.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®' });
    }
    res.json(rows[0]);
  } catch (err) {
    console.error('‚ùå GET supervisor error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

// ‚úèÔ∏è PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const {
    supervisor_name, email, phone_number, department,
    faculty, position, profile_image
  } = req.body;

  try {
    await db.promise().query(
      `UPDATE supervisor SET
        supervisor_name = ?, email = ?, phone_number = ?, department = ?,
        faculty = ?, position = ?, profile_image = ?
      WHERE supervisor_id = ?`,
      [supervisor_name, email, phone_number, department, faculty, position, profile_image, id]
    );
    res.json({ message: '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('‚ùå PUT supervisor error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' });
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
  try {
    const [rows] = await db.promise().query('SELECT * FROM supervisor');
    res.json(rows);
  } catch (err) {
    console.error('‚ùå GET all supervisors error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' });
  }
});

/// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ô‡∏¥‡πÄ‡∏ó‡∏® ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
router.get('/students/:supervisor_id', async (req, res) => {
  const { supervisor_id } = req.params;

  try {
    const [rows] = await db.promise().query(`
      SELECT 
        s.student_id, s.student_name, s.age, s.gender, s.phone_number,
        s.email, s.university, s.gpa, s.profile_image,
        c.company_name,
        j.address AS province
      FROM supervisor_selection ss
      JOIN student s ON ss.student_id = s.student_id
      LEFT JOIN application a ON s.student_id = a.student_id AND a.confirmed = 1
      LEFT JOIN job_posting j ON a.job_posting_id = j.job_posting_id
      LEFT JOIN company c ON j.company_id = c.company_id
      WHERE ss.supervisor_id = ?
    `, [supervisor_id]);

    res.json(rows);
  } catch (err) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' });
  }
});


module.exports = router;
